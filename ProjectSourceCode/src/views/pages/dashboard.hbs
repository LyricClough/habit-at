<!-- src/views/pages/dashboard.hbs -->
<div class="space-y-8">
  <!-- HEADER -->
  <div class="mb-6">
    <h1 class="text-3xl font-bold">
      Welcome back, {{#if user.username}}{{user.username}}{{else}}User{{/if}}!
    </h1>
    <div class="mt-2 flex items-center">
      <p id="date" class="text-gray-600"></p>
      <span
        class="ml-4 inline-block bg-indigo-100 text-indigo-800 px-2 py-1 rounded-full text-sm font-medium">
        {{#if streak}}{{streak}} Day Streak{{else}}Day Streak{{/if}}
      </span>
    </div>
  </div>

  <!-- TOP SUMMARY SECTION -->
  <div class="grid gap-6 sm:grid-cols-2 lg:grid-cols-4">
    <!-- Current Completion Rate -->
    <div class="bg-white rounded-xl shadow-sm p-6 flex flex-col justify-between hover:shadow-md transition-shadow group">
      <div class="flex items-center justify-between mb-4">
        <span class="text-gray-500">Today's Completion</span>
        <span class="bg-blue-100 text-blue-800 p-2 rounded-full">
          <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                  d="M3 22V8h4v14M10 22V2h4v20M17 22v-8h4v8" />
          </svg>
        </span>
      </div>
      <div class="flex flex-col items-center mb-2">
        <div class="w-16 h-16 relative mb-2">
          <!-- Circular progress bar -->
          <svg viewBox="0 0 36 36" class="w-16 h-16 transform -rotate-90">
            <circle cx="18" cy="18" r="16" fill="none" stroke="#edf2f7" stroke-width="3"></circle>
            <circle cx="18" cy="18" r="16" fill="none" stroke="#4f46e5" stroke-width="3" 
                    stroke-dasharray="100" 
                    {{#if habits}}
                      {{#if completionPerc}}
                        stroke-dashoffset="{{subtract 100 completionPerc}}"
                      {{else}}
                        stroke-dashoffset="100"
                      {{/if}}
                    {{else}}
                      stroke-dashoffset="100"
                    {{/if}}></circle>
          </svg>
          <div class="absolute inset-0 flex items-center justify-center">
            <span class="text-xl font-bold">{{#if habits}}{{completionPerc}}%{{else}}0%{{/if}}</span>
          </div>
        </div>
      </div>
      <p class="text-center text-sm text-gray-500">
        {{completedHabits.length}}/{{habits.length}} completed today
      </p>
    </div>

    <!-- Active Habits Count -->
    <div class="bg-white rounded-xl shadow-sm p-6 flex flex-col justify-between hover:shadow-md transition-shadow">
      <div class="flex items-center justify-between mb-4">
        <span class="text-gray-500">Active Habits</span>
        <span class="bg-green-100 text-green-800 p-2 rounded-full">
          <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                  d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" />
          </svg>
        </span>
      </div>
      <p class="text-3xl font-bold text-center">
        {{#if allHabits}}{{allHabits.length}}{{else}}0{{/if}}
      </p>
      <p class="mt-2 text-sm text-gray-500 text-center">Total active habits</p>
    </div>

    <!-- Longest Streak -->
    <div class="bg-white rounded-xl shadow-sm p-6 flex flex-col justify-between hover:shadow-md transition-shadow">
      <div class="flex items-center justify-between mb-4">
        <span class="text-gray-500">Longest Streak</span>
        <span class="bg-yellow-100 text-yellow-800 p-2 rounded-full">
          <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                  d="M17.657 18.657A8 8 0 016.343 7.343S7 9 9 10c0-2 .5-5 2.986-7C14 5 16.09 5.777 17.656 7.343A7.975 7.975 0 0120 13a7.975 7.975 0 01-2.343 5.657z" />
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                  d="M9.879 16.121A3 3 0 1012.015 11L11 14H9c0 .768.293 1.536.879 2.121z" />
          </svg>
        </span>
      </div>
      <p class="text-3xl font-bold text-center">{{longestStreak}}</p>
      <p class="mt-2 text-sm text-gray-500 text-center">days in a row</p>
    </div>

    <!-- Friends -->
    <div class="bg-white rounded-xl shadow-sm p-6 flex flex-col justify-between hover:shadow-md transition-shadow">
      <div class="flex items-center justify-between mb-4">
        <span class="text-gray-500">Friends</span>
        <span class="bg-purple-100 text-purple-800 p-2 rounded-full">
          <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                  d="M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197M13 7a4 4 0 11-8 0 4 4 0 018 0z" />
          </svg>
        </span>
      </div>
      <p class="text-3xl font-bold text-center">{{friendCount}}</p>
      <div class="mt-2 text-sm text-gray-500 text-center">
        {{#if friendRequests}}
          <a href="/friends" class="text-indigo-600 hover:underline">{{friendRequests}} new request(s)</a>
        {{else}}
          Connected friends
        {{/if}}
      </div>
    </div>
  </div>
  
  <!-- MAIN CONTENT GRID -->
  <div class="grid gap-6 lg:grid-cols-3">
    <!-- HABITS DUE TODAY (Left column, spans 2 on large screens) -->
    <div class="lg:col-span-2 space-y-6">
      <!-- TODAY'S HABITS HEADER -->
      <div class="flex items-center justify-between">
        <h2 class="text-xl font-semibold">Habits Due Today</h2>
        <div class="flex space-x-2">
          <a href="/habits" class="flex items-center text-gray-700 px-3 py-1.5 rounded hover:bg-gray-100">
            View All
          </a>
          <a href="/habits" class="flex items-center bg-indigo-600 text-white px-4 py-1.5 rounded-lg hover:bg-indigo-500 shadow-sm">
            <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                    d="M12 4v16m8-8H4" />
            </svg>
            New Habit
          </a>
        </div>
      </div>

      <!-- HABITS CARD -->
      <div class="bg-white rounded-xl shadow-sm overflow-hidden">
        <div class="divide-y divide-gray-100">
          {{#if habits}}
            {{#each incompleteHabits}}
              <div class="hover:bg-gray-50 transition-colors p-4">
                <div class="flex items-center">
                  <div class="mr-4">
                    <form action="/completedHabit" method="POST">
                      <input type="hidden" name="habitId" value="{{habit_id}}">
                      <input type="checkbox"
                             onChange="this.form.submit()"
                             class="h-5 w-5 text-indigo-600 border-gray-300 rounded focus:ring-indigo-500"
                             {{#if (greaterThanZero counter)}}checked disabled{{/if}} />
                    </form>
                  </div>
                  <div class="flex-1">
                    <h3 class="font-medium text-gray-900">{{habit_name}}</h3>
                    <div class="flex items-center text-sm text-gray-500 mt-0.5 space-x-2">
                      <span>{{description}}</span>
                      <span>•</span>
                      <span>{{printTime time_slot}}</span>
                    </div>
                  </div>
                  <div class="flex items-center space-x-3">
                    <div>
                      <div class="w-24 bg-gray-200 rounded-full h-2 mb-1">
                        <div class="bg-indigo-600 h-2 rounded-full" style="width: {{calculateProgress counter}}%"></div>
                      </div>
                      <span class="text-xs text-gray-500">{{counter}} completions</span>
                    </div>
                    <button type="button" class="text-gray-400 hover:text-gray-600" onclick="openHabitDetailModal('{{habit_id}}')">
                      <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
                      </svg>
                    </button>
                  </div>
                </div>
              </div>
            {{/each}}

            {{#each completedHabits}}
              <div class="bg-gray-50 p-4">
                <div class="flex items-center">
                  <div class="mr-4">
                    <form action="/decrementHabit" method="POST">
                      <input type="hidden" name="habitId" value="{{habit_id}}">
                      <input type="checkbox"
                             onChange="this.form.submit()"
                             class="h-5 w-5 text-indigo-600 border-gray-300 rounded focus:ring-indigo-500"
                             checked />
                    </form>
                  </div>
                  <div class="flex-1">
                    <h3 class="font-medium text-gray-900 line-through">{{habit_name}}</h3>
                    <div class="flex items-center text-sm text-gray-500 mt-0.5 space-x-2">
                      <span>{{description}}</span>
                      <span>•</span>
                      <span>{{printTime time_slot}}</span>
                    </div>
                  </div>
                  <div class="flex items-center space-x-3">
                    <div>
                      <div class="w-24 bg-gray-200 rounded-full h-2 mb-1">
                        <div class="bg-indigo-600 h-2 rounded-full" style="width: {{calculateProgress counter}}%"></div>
                      </div>
                      <span class="text-xs text-gray-500">{{counter}} completions</span>
                    </div>
                    <span class="inline-block bg-blue-100 text-blue-800 text-xs px-2 py-1 rounded-full">
                      Completed
                    </span>
                  </div>
                </div>
              </div>
            {{/each}}
          {{else}}
            <div class="py-12 text-center text-gray-500 italic">
              <div class="flex flex-col items-center justify-center">
                <svg class="w-16 h-16 text-gray-300 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5"
                        d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" />
                </svg>
                <p>You have no habits scheduled for today!</p>
                <a href="/habits" class="mt-4 text-indigo-600 hover:text-indigo-800 font-medium">Add a habit</a>
              </div>
            </div>
          {{/if}}
        </div>
      </div>

      <!-- COMPLETION RATE CHART -->
      <div>
        <div class="flex items-center justify-between mb-4">
          <h2 class="text-xl font-semibold">Completion Rate</h2>
          <a href="/statistics" class="text-sm text-indigo-600 hover:text-indigo-800">
            View detailed statistics
          </a>
        </div>
        <div class="bg-white rounded-xl shadow-sm p-6">
          <div id="completionChart" class="h-64"></div>
        </div>
      </div>
    </div>

    <!-- RIGHT COLUMN (Calendar & Reminders) -->
    <div class="space-y-6">
      <!-- CALENDAR -->
      <div>
        <div class="flex items-center justify-between mb-4">
          <h2 class="text-xl font-semibold">Calendar</h2>
          <a href="/calendar" class="text-sm text-indigo-600 hover:text-indigo-800">
            View full calendar
          </a>
        </div>
        <div class="bg-white rounded-xl shadow-sm p-4">
          <div class="flex items-center justify-between mb-4">
            <button id="prevMonth" class="p-2 rounded-full hover:bg-gray-100">
              <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
              </svg>
            </button>
            <div id="currentMonth" class="font-medium"></div>
            <button id="nextMonth" class="p-2 rounded-full hover:bg-gray-100">
              <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
              </svg>
            </button>
          </div>
          
          <!-- Calendar day header -->
          <div class="grid grid-cols-7 mb-2">
            <div class="text-center text-gray-500 text-xs font-medium">S</div>
            <div class="text-center text-gray-500 text-xs font-medium">M</div>
            <div class="text-center text-gray-500 text-xs font-medium">T</div>
            <div class="text-center text-gray-500 text-xs font-medium">W</div>
            <div class="text-center text-gray-500 text-xs font-medium">T</div>
            <div class="text-center text-gray-500 text-xs font-medium">F</div>
            <div class="text-center text-gray-500 text-xs font-medium">S</div>
          </div>
          
          <!-- Calendar days grid - will be filled with JS -->
          <div id="calendarDays" class="grid grid-cols-7 gap-1"></div>
        </div>
      </div>

      <!-- UPCOMING REMINDERS -->
      <div>
        <div class="flex items-center justify-between mb-4">
          <h2 class="text-xl font-semibold">Upcoming Reminders</h2>
          <a href="/notifications" class="text-sm text-indigo-600 hover:text-indigo-800">
            + Add New
          </a>
        </div>
        <div class="bg-white rounded-xl shadow-sm divide-y">
          {{#if reminders}}
            {{#each reminders}}
              <div class="p-4 flex items-center">
                <div class="p-2 rounded-full bg-indigo-100 mr-3">
                  <svg class="w-5 h-5 text-indigo-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" 
                          d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                  </svg>
                </div>
                <div class="flex-1">
                  <h3 class="font-medium text-gray-900">{{habit_name}}</h3>
                  <p class="text-sm text-gray-500">Reminder at {{formatted_time}}</p>
                </div>
                <form action="/notifications/toggle-reminder" method="POST" class="inline-block">
                  <input type="hidden" name="reminder_id" value="{{reminder_id}}">
                  <input type="hidden" name="enabled" value="false">
                  <button type="submit" class="text-gray-400 hover:text-gray-600">
                    <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" 
                            d="M6 18L18 6M6 6l12 12" />
                    </svg>
                  </button>
                </form>
              </div>
            {{/each}}
          {{else}}
            <div class="p-6 text-center text-gray-500">
              <div class="flex flex-col items-center justify-center">
                <svg class="w-12 h-12 text-gray-300 mb-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5"
                        d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
                <p>No reminders scheduled</p>
                <a href="/notifications" class="mt-2 text-indigo-600 hover:text-indigo-800 font-medium">Set up reminders</a>
              </div>
            </div>
          {{/if}}
        </div>
      </div>

      <!-- WEEKLY PROGRESS SUMMARY -->
      <div>
        <div class="flex items-center justify-between mb-4">
          <h2 class="text-xl font-semibold">Weekly Progress</h2>
        </div>
        <div class="bg-white rounded-xl shadow-sm p-4">
          <div class="flex justify-between items-end space-x-1 mb-2 px-2">
            {{#each weeklyData}}
              <div class="flex flex-col items-center">
                {{#if (equals @index 0)}}
                  <div class="text-xs font-medium text-gray-500 mb-1">S</div>
                {{else if (equals @index 1)}}
                  <div class="text-xs font-medium text-gray-500 mb-1">M</div>
                {{else if (equals @index 2)}}
                  <div class="text-xs font-medium text-gray-500 mb-1">T</div>
                {{else if (equals @index 3)}}
                  <div class="text-xs font-medium text-gray-500 mb-1">W</div>
                {{else if (equals @index 4)}}
                  <div class="text-xs font-medium text-gray-500 mb-1">T</div>
                {{else if (equals @index 5)}}
                  <div class="text-xs font-medium text-gray-500 mb-1">F</div>
                {{else}}
                  <div class="text-xs font-medium text-gray-500 mb-1">S</div>
                {{/if}}
                
                <div class="w-7 h-16 bg-gray-100 rounded-t-lg relative overflow-hidden">
                  <div class="absolute bottom-0 w-full bg-indigo-500 rounded-t-lg" style="height: {{this}}%;"></div>
                </div>
              </div>
            {{/each}}
          </div>
          
          {{#if streak}}
            <div class="mt-3 flex items-center justify-between bg-gradient-to-r from-indigo-50 to-purple-50 p-3 rounded-lg">
              <div class="text-sm">
                <span class="text-gray-600">{{streak}} day streak!</span>
              </div>
              <a href="/statistics" class="text-xs px-3 py-1.5 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700">See Stats</a>
            </div>
          {{/if}}
        </div>
      </div>
    </div>
  </div>
</div>

<!-- QUICK ADD HABIT BUTTON (Floating) -->
<div class="fixed bottom-8 right-8">
  <a href="/habits" class="flex items-center justify-center w-14 h-14 bg-indigo-600 text-white rounded-full shadow-lg hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path>
    </svg>
  </a>
</div>

<!-- HABIT DETAIL MODAL (Hidden by default) -->
<div id="habitDetailModal" class="fixed inset-0 z-50 hidden overflow-y-auto">
  <div class="flex items-center justify-center min-h-screen px-4">
    <div class="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity" id="modalOverlay"></div>
    <div class="relative bg-white rounded-lg max-w-md w-full mx-auto shadow-xl z-10">
      <div class="p-6" id="modalContent">
        <!-- Content will be filled dynamically -->
        <div class="animate-pulse">
          <div class="h-6 bg-gray-200 rounded w-3/4 mb-4"></div>
          <div class="h-4 bg-gray-200 rounded w-5/6 mb-2"></div>
          <div class="h-4 bg-gray-200 rounded w-4/6 mb-6"></div>
          <div class="h-24 bg-gray-200 rounded mb-4"></div>
          <div class="h-10 bg-gray-200 rounded w-full"></div>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  // Current date display
  const dateEl = document.getElementById('date');
  if (dateEl) {
    const d = new Date();
    const days = ["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"];
    dateEl.textContent = `${days[d.getDay()]}, ${
      d.toLocaleString('default',{ month:'long' })
    } ${d.getDate()}, ${d.getFullYear()}`;
  }

  // Calendar functionality
  let currentDisplayMonth = new Date().getMonth();
  let currentDisplayYear = new Date().getFullYear();
  
  function generateCalendar(month = currentDisplayMonth, year = currentDisplayYear) {
    const firstDay = new Date(year, month, 1);
    const lastDay = new Date(year, month + 1, 0);
    
    const startingDayOfWeek = firstDay.getDay();
    const daysInMonth = lastDay.getDate();
    
    // Update month display
    document.getElementById('currentMonth').textContent = 
      `${firstDay.toLocaleString('default', { month: 'long' })} ${year}`;
    
    const calendarDays = document.getElementById('calendarDays');
    calendarDays.innerHTML = '';
    
    // Add empty cells for days before the first day of month
    for (let i = 0; i < startingDayOfWeek; i++) {
      const emptyDay = document.createElement('div');
      emptyDay.classList.add('h-9', 'w-9', 'rounded-full', 'flex', 'items-center', 'justify-center');
      calendarDays.appendChild(emptyDay);
    }
    
    // Create days of the month
    for (let day = 1; day <= daysInMonth; day++) {
      const dayElement = document.createElement('div');
      dayElement.classList.add('h-9', 'w-9', 'rounded-full', 'flex', 'items-center', 'justify-center', 'text-sm');
      
      // Check if it's today
      const today = new Date();
      const isToday = day === today.getDate() && 
                      month === today.getMonth() && 
                      year === today.getFullYear();
                      
      if (isToday) {
        dayElement.classList.add('bg-indigo-600', 'text-white', 'font-medium');
      } else {
        dayElement.classList.add('hover:bg-gray-100', 'cursor-pointer');
      }
      
      // Fetch habits for this date to determine if we should show indicator
      const dateStr = `${year}-${String(month + 1).padStart(2, '0')}-${String(day).padStart(2, '0')}`;
      
      // Check if this day has habits (will be replaced with actual API call)
      fetchHabitsForDate(dateStr)
        .then(hasHabits => {
          if (hasHabits) {
            dayElement.innerHTML = `
              ${day}
              <div class="absolute -bottom-1">
                <div class="h-1 w-1 bg-indigo-500 rounded-full"></div>
              </div>
            `;
            dayElement.classList.add('relative');
          } else {
            dayElement.textContent = day;
          }
        });
      
      dayElement.onclick = () => showHabitsForDate(year, month, day);
      calendarDays.appendChild(dayElement);
    }
  }
  
  function navigateMonth(dir) {
    return function() {
      // Adjust the current month and regenerate the calendar
      currentDisplayMonth += dir;
      
      // Handle year change if needed
      if (currentDisplayMonth < 0) {
        currentDisplayMonth = 11;
        currentDisplayYear--;
      } else if (currentDisplayMonth > 11) {
        currentDisplayMonth = 0;
        currentDisplayYear++;
      }
      
      generateCalendar(currentDisplayMonth, currentDisplayYear);
    };
  }
  
  // Temporary function to simulate fetching habits - will be replaced with actual API call
  async function fetchHabitsForDate(dateStr) {
    // Here we're simulating API response
    // In reality, this would be an API call to fetch habits for the date
    return new Promise(resolve => {
      setTimeout(() => {
        // Sample data - randomly determine if a date has habits
        const hasHabits = Math.random() > 0.7;
        resolve(hasHabits);
      }, 10);
    });
  }
  
  function showHabitsForDate(year, month, day) {
    const dateStr = `${year}-${String(month + 1).padStart(2, '0')}-${String(day).padStart(2, '0')}`;
    
    // Show loading state
    const modal = document.getElementById('habitDetailModal');
    modal.classList.remove('hidden');
    
    document.getElementById('modalContent').innerHTML = `
      <div class="flex justify-between items-start">
        <h3 class="text-lg font-medium text-gray-900">Habits for ${new Date(year, month, day).toLocaleDateString()}</h3>
        <button onclick="closeHabitDetailModal()" class="text-gray-400 hover:text-gray-500">
          <svg class="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
          </svg>
        </button>
      </div>
      <div class="mt-4">
        <div class="animate-pulse">
          <div class="h-4 bg-gray-200 rounded w-3/4 mb-2"></div>
          <div class="h-4 bg-gray-200 rounded w-5/6 mb-6"></div>
        </div>
      </div>
    `;
    
    // Fetch habits for this date
    fetch(`/api/habits/date/${dateStr}`)
      .then(response => response.json())
      .then(data => {
        let content = `
          <div class="flex justify-between items-start">
            <h3 class="text-lg font-medium text-gray-900">Habits for ${new Date(year, month, day).toLocaleDateString()}</h3>
            <button onclick="closeHabitDetailModal()" class="text-gray-400 hover:text-gray-500">
              <svg class="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
              </svg>
            </button>
          </div>
          <div class="mt-4">
        `;
        
        if (data.habits && data.habits.length > 0) {
          content += `<ul class="divide-y divide-gray-200">`;
          data.habits.forEach(habit => {
            content += `
              <li class="py-3">
                <div class="flex items-center">
                  <div class="flex-1">
                    <h4 class="font-medium text-gray-900">${habit.habit_name}</h4>
                    <p class="text-sm text-gray-500">${habit.description}</p>
                  </div>
                  <div class="ml-4">
                    <button class="px-3 py-1 text-sm bg-indigo-600 text-white rounded-md hover:bg-indigo-500">
                      Complete
                    </button>
                  </div>
                </div>
              </li>
            `;
          });
          content += `</ul>`;
        } else {
          content += `
            <div class="py-8 text-center text-gray-500">
              <p>No habits scheduled for this day</p>
              <a href="/habits" class="mt-2 inline-block text-indigo-600 hover:text-indigo-800">Add a habit</a>
            </div>
          `;
        }
        
        content += `</div>`;
        document.getElementById('modalContent').innerHTML = content;
      })
      .catch(error => {
        document.getElementById('modalContent').innerHTML = `
          <div class="flex justify-between items-start">
            <h3 class="text-lg font-medium text-gray-900">Habits for ${new Date(year, month, day).toLocaleDateString()}</h3>
            <button onclick="closeHabitDetailModal()" class="text-gray-400 hover:text-gray-500">
              <svg class="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
              </svg>
            </button>
          </div>
          <div class="mt-4 text-center text-red-500">
            <p>Error loading habits. Please try again.</p>
          </div>
        `;
      });
  }
  
  function closeHabitDetailModal() {
    const modal = document.getElementById('habitDetailModal');
    modal.classList.add('hidden');
  }
  
  function renderCompletionChart() {
    const ctx = document.getElementById('completionChart').getContext('2d');
    
    // Get the last 7 days for the x-axis labels
    const labels = [];
    for (let i = 6; i >= 0; i--) {
      const d = new Date();
      d.setDate(d.getDate() - i);
      labels.push(d.toLocaleDateString('en-US', { weekday: 'short' }));
    }
    
    // Parse the weekly data passed from the server
    const weeklyDataStr = '{{weeklyData}}';
    let completionData;
    
    try {
      // If data is passed as a JSON array, parse it
      completionData = JSON.parse(weeklyDataStr.replace(/&quot;/g, '"'));
    } catch (e) {
      // If parsing fails, use the weekly data directly as an array
      completionData = [
        {{#each weeklyData}}
          {{this}}{{#unless @last}},{{/unless}}
        {{/each}}
      ];
      
      // If there's no data, use sample data
      if (!completionData.length) {
        completionData = [65, 70, 80, 75, 90, 85, {{completionPerc}}];
      }
    }
    
    // Create the chart
    new Chart(ctx, {
      type: 'line',
      data: {
        labels: labels,
        datasets: [{
          label: 'Completion Rate (%)',
          data: completionData,
          borderColor: '#4f46e5',
          backgroundColor: 'rgba(79, 70, 229, 0.1)',
          tension: 0.3,
          fill: true
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
          legend: {
            display: false
          },
          tooltip: {
            callbacks: {
              label: function(context) {
                return context.raw + '% completed';
              }
            }
          }
        },
        scales: {
          y: {
            beginAtZero: true,
            max: 100,
            ticks: {
              callback: function(value) {
                return value + '%';
              }
            }
          }
        }
      }
    });
  }
  
  // Example function to handle the add reminder button
  document.getElementById('addReminderBtn')?.addEventListener('click', function() {
    alert('Add reminder functionality would be implemented here');
  });

  // Generate the calendar on page load
  document.addEventListener('DOMContentLoaded', function() {
    // Initialize calendar
    generateCalendar();
    
    // Initialize chart
    renderCompletionChart();
    
    // Set up event listeners
    document.getElementById('prevMonth').addEventListener('click', navigateMonth(-1));
    document.getElementById('nextMonth').addEventListener('click', navigateMonth(1));
    
    // Set up modal handlers
    document.getElementById('modalOverlay').addEventListener('click', closeHabitDetailModal);
    
    // Set up habit detail handlers
    document.querySelectorAll('[data-habit-id]').forEach(element => {
      element.addEventListener('click', function() {
        const habitId = this.getAttribute('data-habit-id');
        openHabitDetailModal(habitId);
      });
    });
  });

  function openHabitDetailModal(habitId) {
    const modal = document.getElementById('habitDetailModal');
    modal.classList.remove('hidden');
    
    // Show loading state
    document.getElementById('modalContent').innerHTML = `
      <div class="flex justify-between items-start">
        <h3 class="text-lg font-medium text-gray-900">Habit Details</h3>
        <button onclick="closeHabitDetailModal()" class="text-gray-400 hover:text-gray-500">
          <svg class="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
          </svg>
        </button>
      </div>
      <div class="mt-4">
        <div class="animate-pulse">
          <div class="h-4 bg-gray-200 rounded w-3/4 mb-2"></div>
          <div class="h-4 bg-gray-200 rounded w-5/6 mb-6"></div>
        </div>
      </div>
    `;
    
    // In a real implementation, you would fetch the habit details from the server
    // Instead of using the date API, we would use a different endpoint specifically for habit details
    fetch(`/api/habits/${habitId}`)
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          document.getElementById('modalContent').innerHTML = `
            <div class="flex justify-between items-start">
              <h3 class="text-lg font-medium text-gray-900">${data.habit.habit_name}</h3>
              <button onclick="closeHabitDetailModal()" class="text-gray-400 hover:text-gray-500">
                <svg class="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                </svg>
              </button>
            </div>
            <div class="mt-4">
              <p class="text-gray-500 mb-4">${data.habit.description || 'No description available'}</p>
              <div class="bg-gray-50 p-3 rounded-lg mb-4">
                <div class="text-sm font-medium text-gray-500 mb-1">Progress</div>
                <div class="w-full bg-gray-200 rounded-full h-2.5 mb-1">
                  <div class="bg-indigo-600 h-2.5 rounded-full" style="width: ${data.habit.progress || 0}%"></div>
                </div>
                <div class="flex justify-between text-xs text-gray-500">
                  <span>${data.habit.counter || 0} completions</span>
                  <span>Target: 10</span>
                </div>
              </div>
              <form action="/completedHabit" method="POST">
                <input type="hidden" name="habitId" value="${habitId}">
                <button type="submit" class="w-full py-2 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700">
                  Mark as Complete
                </button>
              </form>
            </div>
          `;
        } else {
          // Show error
          document.getElementById('modalContent').innerHTML = `
            <div class="flex justify-between items-start">
              <h3 class="text-lg font-medium text-gray-900">Habit Details</h3>
              <button onclick="closeHabitDetailModal()" class="text-gray-400 hover:text-gray-500">
                <svg class="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                </svg>
              </button>
            </div>
            <div class="mt-4 text-center text-red-500">
              <p>Error loading habit details. Please try again.</p>
            </div>
          `;
        }
      })
      .catch(error => {
        // If API is not yet implemented, show a placeholder
        document.getElementById('modalContent').innerHTML = `
          <div class="flex justify-between items-start">
            <h3 class="text-lg font-medium text-gray-900">Habit Details</h3>
            <button onclick="closeHabitDetailModal()" class="text-gray-400 hover:text-gray-500">
              <svg class="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
              </svg>
            </button>
          </div>
          <div class="mt-4">
            <p class="text-gray-500 mb-4">This is a placeholder for habit details with ID: ${habitId}</p>
            <div class="bg-gray-50 p-3 rounded-lg mb-4">
              <div class="text-sm font-medium text-gray-500 mb-1">Progress</div>
              <div class="w-full bg-gray-200 rounded-full h-2.5 mb-1">
                <div class="bg-indigo-600 h-2.5 rounded-full" style="width: 65%"></div>
              </div>
              <div class="flex justify-between text-xs text-gray-500">
                <span>0</span>
                <span>Target: 10</span>
              </div>
            </div>
            <form action="/completedHabit" method="POST">
              <input type="hidden" name="habitId" value="${habitId}">
              <button type="submit" class="w-full py-2 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700">
                Mark as Complete
              </button>
            </form>
          </div>
        `;
      });
  }
</script>
